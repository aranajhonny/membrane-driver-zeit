const { dependencies, endpoints, environment, imports, schema, expressions, tests } = program;

environment
  .add('TOKEN', 'The API TOKEN')

tests
  .add('access', 'The driver can access the Zeit API and retrieve data')

schema.type('Root')
  .field('deployments', 'DeploymentCollection')
  .field('teams', 'TeamCollection')
  .field('aliases', 'AliasCollection')
  .field('domains', 'DomainCollection')
  .field('certificates', 'CertificateCollection')
  .field('dns', 'DnsCollection')
  // .field('instances', 'InstanceCollection')

expressions
  .add('url', '^[a-zA-Z0-9-]+\.now\.sh$')

schema.type('DeploymentCollection')
  .computed('one', 'Deployment')
    .param('uid', 'String')
  .computed('items', '[DeploymentItem]')

schema.type('DeploymentItem')
  .field('uid', 'String')
  .computed('self', 'DeploymentItem*')

schema.type('Deployment')
  .computed('self', 'Deployment*')
  .field('uid', 'String')
  .field('host', 'String')
  .field('state', 'String')
  .field('stateTs', 'String')
  .field('scale','ScaleConfiguration')
  .action('setScaleConfiguration')
    .param('min', 'Int')
    .param('max', 'Int')
  .action('setAlias')
    .param('alias', 'String')
  .computed('aliases', '[Alias]')
  // .computed('instances','InstanceCollection')

schema.type('ScaleConfiguration')
  .field('current', 'Int')
  .field('min', 'Int')
  .field('max', 'Int')

// schema.type('InstanceCollection')
//   .computed('one', 'Instance')
//     .param('uid', 'String')
//   .computed('items', '[Instance]')

// schema.type('Instance')
//   .computed('self', 'Instance*')
//   .field('uid', 'String')
//   .field('url', 'String')

schema.type('AliasCollection')
  .computed('one', 'Alias')
    .param('uid', 'String')
  .computed('items', '[Alias]')

schema.type('Alias')
  .computed('self', 'Alias*')
  .field('uid', 'String')
  .field('alias', 'String')
  .field('created', 'String')
  .field('deploymentId', 'String')

schema.type('TeamCollection')
  .computed('one', 'Team')
    .param('id', 'String')
  .computed('items', '[Team]')

schema.type('Team')
  .computed('self', 'Team*')
  .field('id', 'String')
  .field('slug', 'String')
  .field('name', 'String')
  .field('creatorId', 'String')
  .field('avatar', 'String')
  .computed('deployments', 'DeploymentCollection')

schema.type('DomainCollection')
  .computed('one', 'Domain')
    .param('uid', 'String')
  .computed('items', '[Domain]')
  .action('createDomain')
    .param('name', 'String')
    .param('isExternal', 'Boolean')
  .action('checkDomain')
    .param('name', 'String')
  .action('deleteDomain')
    .param('name', 'String')

schema.type('Domain')
  .computed('self', 'Domain*')
  .field('uid','String')
  .field('name','String')
  .field('created','String')
  .field('boughtAt','String')
  .field('expiresAt','String')
  .field('isExternal','Boolean')
  .field('verified','Boolean')
  .field('aliases','[String]')
  .field('certs','[String]')
  .computed('dns','[Dns]')
  .action('createDns')
    .param('name', 'String')
    .param('type', 'String')
    .param('value', 'String')
  .action('deleteDns')
    .param('id', 'String')

schema.type('DnsCollection')
  .computed('one', 'Dns')
    .param('uid', 'String')
  .computed('items', '[Dns]')

schema.type('Dns')
  .computed('self', 'Dns*')
  .field('id','String')
  .field('slug','String')
  .field('type','String')
  .field('name','String')
  .field('value', 'String')
  .field('created','String')
  .field('updated','String')

schema.type('CertificateCollection')
  .computed('one', 'Certificate')
    .param('cn', 'String')
  .computed('items', '[Certificate]')
  .action('createCertificate')
    .param('domains','[String]')
    .param('renew','Boolean')
  .action('replaceCertificate')
    .param('domains','[String]')
    .param('ca','String')
    .param('cert','String')
    .param('key','String')

schema.type('Certificate')
  .computed('self', 'Certificate*')
  .field('uid','String')
  .field('cn','String')
  .field('created','String')
  .field('expiration','String')
  .field('autoRenew','String')